{"version":3,"sources":["webpack://ywac-youth/./src/containers/SubmitStory/style.ts","webpack://ywac-youth/./src/templates/submitStory.tsx"],"names":["Content","styled","props","theme","palette","primary","TopText","down","Message","font","size","l","location","pageContext","seoKeyword","seoDescription","isFr","useLocation","pathname","startsWith","useState","message","setMessage","validationSchema","useRef","Yup","shape","name","required","story","image","nullable","recaptcha","title","keyword","description","colors","className","initialValues","onSubmit","values","resetForm","console","log","temp","Object","keys","map","key","split","join","push","folderName","format","Date","axios","branch","author_email","author_name","content","commit_message","headers","file","slice","encoding","fetch","method","body","encodeForm","then","catch","error","setValues","label","labelFr","text","type","buttonType","background","to"],"mappings":"yUAGaA,EAAUC,oBAAH,0DAAGA,CAAH,gBACT,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,WAG3BC,EAAUL,oBAAH,0DAAGA,CAAH,qEAEJ,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,QAAQC,WAEzCE,UAAK,OAIIC,EAAUP,oBAAH,0DAAGA,CAAH,oBACL,SAAAC,GAAK,OAAIA,EAAMC,MAAMM,KAAKC,KAAKC,KCmB9C,WAAe,GAGe,IAF5BC,EAE2B,EAF3BA,SAE2B,IAD3BC,YAAeC,EACY,EADZA,WAAYC,EACA,EADAA,eAGrBC,GADMC,mBACKC,SAASC,WAAW,QACrC,GAA8BC,cAAS,IAAhCC,EAAP,KAAgBC,EAAhB,KAGMC,IAFeC,cAEIC,OAAaC,MAAM,CAC1CC,KAAMF,OAAaG,SACjBZ,EAAO,sCAAwC,yBAEjDa,MAAOJ,OAAaG,SAClBZ,EAAO,yCAA2C,0BAEpDc,MAAOL,OAAaM,WACpBC,UAAWP,OAAcG,SACvBZ,EACI,kDACA,yCAIR,OACE,gBAAC,IAAD,CAAQJ,SAAUA,GAChB,gBAAC,KAAD,CACEM,SAAUN,EAASM,SACnBe,MAAOjB,EAAO,0BAA4B,sBAC1CkB,QAASpB,EACTqB,YAAapB,IAEf,gBAAC,KAAD,CAAQqB,OAAQ,CAAC,UAAW,UAAW,YACrC,0BAAKpB,EAAO,0BAA4B,wBAE1C,gBAAC,KAAD,CAAWoB,OAAQ,CAAC,UAAW,UAAW,UAAW,aACrD,gBAAC9B,EAAD,KACE,uBAAK+B,UAAU,aACb,0BACGrB,EACG,oTACA,oRAIV,gBAAChB,EAAD,CAASqC,UAAU,kBACjB,gBAAC,KAAD,CACEC,cAAe,CACbX,KAAM,GACNE,MAAO,GACPC,MAAO,KACPE,UAAW,IAEbT,iBAAkBA,EAClBgB,SAAQ,mCAAE,WAAOC,EAAP,qFAAiBC,EAAjB,EAAiBA,UACzBC,QAAQC,IAAI,SAAUH,GACtBA,EAAM,UAAgB,GAClBI,EAAO,CAAC,QACZA,EAAI,kBACCA,IADD,OAECC,OAAOC,KAAKN,GAAQO,KAAI,SAAAC,GACzB,MAA2B,iBAAhBR,EAAOQ,GACNA,EAAV,MAAmBR,EAAOQ,GACvBC,MAAM,MACNC,KAAK,mBAFR,IAIuB,OAAhBV,EAAOQ,GACPA,EADA,MACSR,EAAOQ,GAAKrB,KADrB,IAEH,SAILwB,KAAKnC,EAAO,eAAiB,gBAClC4B,EAAKO,KAAK,OAnBF,SAqBAC,GAAaC,aAAO,IAAIC,KAAQ,uBArBhC,UAsBAC,SAAA,oFACgFH,EADhF,cAEJ,CACEI,OAAQ,SACRC,aAAc,qBACdC,YAAa,kBACbC,QAASf,EAAKM,KAAK,aACnBU,eAAe,SAAUpB,EAAOb,KAAlB,gBAEhB,CACEkC,QAAS,CACP,gBAAiB,0BAjCjB,YAqCFrB,EAAOV,MArCL,kCAsCEyB,SAAA,oFACgFH,EADhF,MACgGZ,EAAOV,MAAMH,KACjH,CACE6B,OAAQ,SACRC,aAAc,qBACdC,YAAa,kBACbC,QAASnB,EAAOV,MAAMgC,KACnBb,MAAM,WACNc,MAAM,GACNb,KAAK,IACRc,SAAU,SACVJ,eAAe,cAAepB,EAAOV,MAAMH,KAA7B,gBAEhB,CACEkC,QAAS,CACP,gBAAiB,0BArDnB,QA0DNI,MAAM,6CAA8C,CAClDC,OAAQ,OACRL,QAAS,CACP,eAAgB,qCAElBM,MAAMC,OAAW,CACf,YAAa,QACbzC,KAAMa,EAAOb,KACbE,MAAOW,EAAOX,UAGfwC,MAAK,WACJ/C,EACEN,EACI,gDACA,2DAENyB,OAED6B,OAAM,SAAAC,GACL7B,QAAQC,IAAI,QAAS4B,GACrBjD,EAAWN,EAAO,UAAY,aA/E5B,kDAkFN0B,QAAQC,IAAI,mBAAZ,MACArB,EAAWN,EAAO,UAAY,UAnFxB,0DAAF,0DAuFP,cAAGwD,UAAH,EAAchC,OAAd,OACC,gBAAC,KAAD,CACE,gBAAc,EACdb,KAAK,SAGL,0BAAKX,EAAO,wBAA0B,qBAEtC,gBAAC,KAAD,CACEyD,MAAM,YACNC,QAAQ,MACR/C,KAAK,OACLU,UAAU,YACVT,UAAQ,IAEV,gBAAC,KAAD,CACED,KAAK,QACLgD,KAAM3D,EAAO,qBAAuB,eACpCyD,MAAOzD,EAAO,sBAAwB,kBACtCqB,UAAU,SAEZ,gBAAC,KAAD,CACEoC,MAAOzD,EAAO,wJAA0J,gIACxKW,KAAK,QACLC,UAAQ,IAGV,gBAAC,KAAD,CAAWD,KAAK,cAEfN,GAAW,gBAACb,EAAD,CAAS6B,UAAU,QAAQhB,GACvC,gBAAC,KAAD,CAAQuD,KAAK,SAASC,WAAW,SAASC,WAAW,SAClD9D,EAAO,YAAc,eAMhC,gBAAC,KAAD,KACE,0BACGA,EACG,qFACA,gEAEN,uBAAKqB,UAAU,QACb,gBAAC,KAAD,CAAQuC,KAAK,MAAMG,GAAG,YACnB/D,EACG,wCACA,+BAEZ,qBAAGqB,UAAU,aACbrB,EACE,0HACA","file":"component---src-templates-submit-story-tsx-cf207768e4daa937c99a.js","sourcesContent":["import styled from 'styled-components'\nimport { down } from 'styled-breakpoints'\n\nexport const Content = styled.div`\n  color: ${props => props.theme.palette.primary};\n`\n\nexport const TopText = styled.div`\n  padding: 100px 0;\n  background: ${props => props.theme.palette.primary};\n  color: white;\n  ${down('md')} {\n    padding: 80px 0;\n  }\n`\nexport const Message = styled.div`\n  font-size: ${props => props.theme.font.size.l};\n`\n","import React, { useState, useRef } from 'react'\nimport { graphql } from 'gatsby'\nimport { Form, Formik } from 'formik'\nimport * as Yup from 'yup'\nimport axios from 'axios'\nimport { format } from 'date-fns'\nimport { useLocation } from '@reach/router'\nimport Layout from './../layout'\nimport Reaptcha from 'reaptcha'\nimport { pick } from 'lodash'\nimport { encodeForm } from './../utils'\n\nimport {\n  SEO,\n  StripeBar,\n  Banner,\n  Button,\n  SpotlightFooter,\n  FormInput as Input,\n  FormTextarea as Textarea,\n  FormFileUpload,\n  Recaptcha,\n} from './../components'\nimport { TopText, Content, Message } from './../containers/SubmitStory/style'\n\ninterface ISubmitStoryPageProps {\n  location: {\n    pathname: string\n  }\n  pageContext: {\n    seoKeyword: string\n    seoDescription: string\n  }\n}\n\nexport default ({\n  location,\n  pageContext: { seoKeyword, seoDescription },\n}: ISubmitStoryPageProps) => {\n  const loc = useLocation()\n  const isFr = loc.pathname.startsWith('/fr/')\n  const [message, setMessage] = useState('')\n  const recaptchaRef = useRef()\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required(\n      isFr ? 'Votre nom est un champ obligatoire.' : 'Your Name is required'\n    ),\n    story: Yup.string().required(\n      isFr ? 'Ton histoire est un champ obligatoire.' : 'Your Story is required'\n    ),\n    image: Yup.object().nullable(),\n    recaptcha: Yup.boolean().required(\n      isFr\n        ? \"Veuillez vérifier que vous n'êtes pas un robot.\"\n        : 'Please verify you are not a robot.'\n    ),\n  })\n\n  return (\n    <Layout location={location}>\n      <SEO\n        pathname={location.pathname}\n        title={isFr ? 'Présentez vos histoires' : 'Submit Your Stories'}\n        keyword={seoKeyword}\n        description={seoDescription}\n      />\n      <Banner colors={['#397897', '#00587F', '#80D0DB']}>\n        <h1>{isFr ? 'Présentez vos histoires' : 'Submit Your Stories'}</h1>\n      </Banner>\n      <StripeBar colors={['#D16428', '#E58630', '#DA5027', '#D29329']} />\n      <TopText>\n        <div className='container'>\n          <h2>\n            {isFr\n              ? 'Es-tu un jeune autochtone qui poursuit fièrement sa passion? Tu as une histoire que tu aimerais partager? Présente ta propre histoire pour nous faire part de ce que tu fais pour défendre l\\'égalité des genres! Le leadership prend de nombreuses formes, et il n\\'y a pas d\\'histoire trop grande ou trop petite.'\n              : 'Are you an Indigenous youth proudly pursuing your passion? Have a story that you would like to share? Submit your own story to tell us what you\\'re doing to advocate for gender equality! Remember: Leadership comes in many forms, and there\\'s no story too big or too small.'}\n          </h2>\n        </div>\n      </TopText>\n      <Content className='container py-5'>\n        <Formik\n          initialValues={{\n            name: '',\n            story: '',\n            image: null,\n            recaptcha: '',\n          }}\n          validationSchema={validationSchema}\n          onSubmit={async (values, { resetForm }) => {\n            console.log('values', values)\n            values['recaptcha'] = ''\n            let temp = ['---']\n            temp = [\n              ...temp,\n              ...Object.keys(values).map(key => {\n                if (typeof values[key] === 'string') {\n                  return `${key}: \"${values[key]\n                    .split('\\n')\n                    .join('     \\r\\n\\r\\n  ')}\"`\n                } else {\n                  return values[key] !== null\n                    ? `${key}: \"${values[key].name}\"`\n                    : ''\n                }\n              }),\n            ]\n            temp.push(isFr ? 'language: Fr' : 'language: En')\n            temp.push('---')\n            try {\n              const folderName = format(new Date(), 'MM-dd-yyyy-HH-mm-ss')\n              await axios.post(\n                `https://gitlab.com/api/v4/projects/22180390/repository/files/content%2Fstories%2F${folderName}%2Findex.md`,\n                {\n                  branch: 'master',\n                  author_email: 'support@deplume.ca',\n                  author_name: 'User_Submission',\n                  content: temp.join('     \\r\\n'),\n                  commit_message: `Story ${values.name} is created.`,\n                },\n                {\n                  headers: {\n                    'PRIVATE-TOKEN': 'CZiBaqQd5NGDyzLEpPxw',\n                  },\n                }\n              )\n              if (values.image) {\n                await axios.post(\n                  `https://gitlab.com/api/v4/projects/22180390/repository/files/content%2Fstories%2F${folderName}%2F${values.image.name}`,\n                  {\n                    branch: 'master',\n                    author_email: 'support@deplume.ca',\n                    author_name: 'User_Submission',\n                    content: values.image.file\n                      .split('base64,')\n                      .slice(1)\n                      .join(''),\n                    encoding: 'base64',\n                    commit_message: `Image file ${values.image.name} is created.`,\n                  },\n                  {\n                    headers: {\n                      'PRIVATE-TOKEN': 'CZiBaqQd5NGDyzLEpPxw',\n                    },\n                  }\n                )\n              }\n              fetch('https://generation4equality.ca/submitStory', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: encodeForm({\n                  'form-name': 'story',\n                  name: values.name,\n                  story: values.story,\n                }),\n              })\n                .then(() => {\n                  setMessage(\n                    isFr\n                      ? 'Merci! Nous avons bien reçu votre soumission.'\n                      : \"Thank you! We've successfully received your submission.\"\n                  )\n                  resetForm()\n                })\n                .catch(error => {\n                  console.log('error', error)\n                  setMessage(isFr ? 'Erreur.' : 'Error.')\n                })\n            } catch (error) {\n              console.log('image file error', error)\n              setMessage(isFr ? 'Erreur.' : 'Error.')\n            }\n          }}\n        >\n          {({ setValues, values }) => (\n            <Form\n              data-netlify={true}\n              name='story'\n              // data-nelify-recaptcha='true'\n            >\n              <h2>{isFr ? 'Présente ton histoire' : 'Submit Your Story'}</h2>\n\n              <Input\n                label='Your Name'\n                labelFr='Nom'\n                name='name'\n                className='mt-4 mb-3'\n                required\n              />\n              <FormFileUpload\n                name='image'\n                text={isFr ? 'Choisir un fichier' : 'Select Files'}\n                label={isFr ? \"Télécharger l'image\" : 'Upload an Image'}\n                className='mb-3'\n              />\n              <Textarea\n                label={isFr ? 'Ton histoire (Ici, vous pouvez soit écrire un bref paragraphe, soit partager un lien vidéo décrivant ce que vous faites pour apporter un changement!)' : 'Your Story (Here you can either write a brief paragraph or share a video link describing what you\\'re doing to make a change!)'}\n                name='story'\n                required\n              />\n\n              <Recaptcha name='recaptcha' />\n\n              {message && <Message className='mb-3'>{message}</Message>}\n              <Button type='button' buttonType='submit' background='light'>\n                {isFr ? 'Soumettre' : 'Submit'}\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Content>\n      <SpotlightFooter>\n        <h2>\n          {isFr\n            ? \"Découvrez d'autres défenseurs et leur rôle dans la lutte pour l'égalité des sexes.\"\n            : 'Check out other advocates and their role in gender equality.'}\n        </h2>\n        <div className='mt-5'>\n          <Button type='url' to='/stories'>\n            {isFr\n              ? 'Voir d\\'autres histoires de défenseurs'\n              : 'View Other Advocate Stories'}\n          </Button>\n\t\t  <p className='mt-4 mb-3'>\n\t\t\t{isFr\n\t\t\t\t? \"Veuillez noter que les histoires changeront tous les mois mais seront toujours disponibles dans notre dossier Archives.\"\n\t\t\t\t: 'Please note that stories will rotate monthly but will still be available in our Archives folder.'}\t\t  \n\t\t  </p>\n        </div>\n      </SpotlightFooter>\n    </Layout>\n  )\n}\n\nexport const submitStoryPageQuery = graphql`\n  query SubmitStoryPageQuery {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}